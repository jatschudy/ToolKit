Connect-AzAccount -AccountId $USER -TenantId $TENANT -Subscription $AZURESUBID

$WorkspaceID = (Get-AzOperationalInsightsWorkspace -Name $workspaceName -ResourceGroupName $workspaceRG).CustomerID


$query = "AzureDiagnostics
| where requestUri_s startswith 'https://www.igi-global.com:443/book/'
| extend Identifier = extract('/book/[^/]+/([^/]+)$', 1, requestUri_s)
| where isnotempty(Identifier) and todouble(Identifier) != double(null)
| summarize UniqueRequests = dcount(trackingReference_s) by RequestURI = requestUri_s, Identifier
| project RequestURI, UniqueRequests, Identifier
| top 5 by UniqueRequests"

$Results = Invoke-AzOperationalInsightsQuery -WorkspaceId $WorkspaceId -Query $query -TimeSpan (New-TimeSpan -Days 2)

$ParsedResults = $Results[0].Results | ForEach-Object {
    [PSCustomObject]@{
        RequestURI     = $_[0] # Adjust based on your actual data structure
        UniqueRequests = $_[1]
        Identifier     = $_[2]
    }
}

# Create an array to store cleaned results
$CleanedResults = @()

# Process each entry in $ParsedResults
$ParsedResults | ForEach-Object {
    # Extract the inner properties from the current object
    $rawData = $_.RequestURI

    # Extract the fields using -replace and string operations
    $cleanedRequestURI = ($rawData -replace '^@{RequestURI=', '').Split(';')[0]
    $cleanedUniqueRequests = ($rawData -replace '.*UniqueRequests=', '').Split(';')[0]
    $cleanedIdentifier = ($rawData -replace '.*Identifier=', '').TrimEnd('}')

    # Add the cleaned data to the results array
    $CleanedResults += [PSCustomObject]@{
        UniqueRequests = $cleanedUniqueRequests
        Identifier     = $cleanedIdentifier
	RequestURI     = $cleanedRequestURI
    }
}

# Export the cleaned data to a CSV
$CleanedResults | Export-Csv -Path "C:\AutoTasker\KQL\BookResults.csv" -NoTypeInformation

Write-Host "Cleaned data has been written to 'BookResults.csv'."

$query = "AzureDiagnostics
| where requestUri_s startswith 'https://www.igi-global.com:443/journal/'
| extend Identifier = extract('/journal/[^/]+/([^/]+)$', 1, requestUri_s)
| where isnotempty(Identifier) and todouble(Identifier) != double(null)
| summarize UniqueRequests = dcount(trackingReference_s) by RequestURI = requestUri_s, Identifier
| project RequestURI, UniqueRequests, Identifier
| top 5 by UniqueRequests"

$Results = Invoke-AzOperationalInsightsQuery -WorkspaceId $WorkspaceId -Query $query -TimeSpan (New-TimeSpan -Days 2)

$ParsedResults = $Results[0].Results | ForEach-Object {
    [PSCustomObject]@{
        RequestURI     = $_[0] # Adjust based on your actual data structure
        UniqueRequests = $_[1]
        Identifier     = $_[2]
    }
}

# Create an array to store cleaned results
$CleanedResults = @()

# Process each entry in $ParsedResults
$ParsedResults | ForEach-Object {
    # Extract the inner properties from the current object
    $rawData = $_.RequestURI

    # Extract the fields using -replace and string operations
    $cleanedRequestURI = ($rawData -replace '^@{RequestURI=', '').Split(';')[0]
    $cleanedUniqueRequests = ($rawData -replace '.*UniqueRequests=', '').Split(';')[0]
    $cleanedIdentifier = ($rawData -replace '.*Identifier=', '').TrimEnd('}')

    # Add the cleaned data to the results array
    $CleanedResults += [PSCustomObject]@{
        UniqueRequests = $cleanedUniqueRequests
        Identifier     = $cleanedIdentifier
	RequestURI     = $cleanedRequestURI
    }
}

# Export the cleaned data to a CSV
$CleanedResults | Export-Csv -Path "C:\AutoTasker\KQL\JournalResults.csv" -NoTypeInformation

Write-Host "Cleaned data has been written to 'JournalResults.csv'."

#############

$csvData = Import-Csv -Path "C:\AutoTasker\KQL\BookResults.csv"

# Initialize an empty array to hold updated rows
$updatedRows = @()

# Iterate through each row in the CSV
foreach ($row in $csvData) {
    # Get the RequestURI from the current row
    $requestURI = $row.RequestURI

    # Perform an HTTP GET request for the RequestURI
    try {
        $response = Invoke-WebRequest -Uri $requestURI -Method Get -TimeoutSec 30
        
        # Check if the StatusCode is 200
        if ($response.StatusCode -eq 200) {
            # If StatusCode is 200, add the row to the updated array
            $updatedRow = [PSCustomObject]@{
                RequestURI    = $row.RequestURI
                UniqueRequests = $row.UniqueRequests
                Identifier    = $row.Identifier
                StatusCode    = $response.StatusCode
                StatusMessage = $response.StatusDescription
            }
            $updatedRows += $updatedRow
            Write-Host "Successfully reached: $requestURI - Status Code: $($response.StatusCode)"
        } else {
            Write-Host "Skipping: $requestURI - Status Code: $($response.StatusCode)"
        }
    }
    catch {
        # If an error occurs (e.g., network issues), add a failed status row
        Write-Host "Failed to reach: $requestURI - Error: $_"
    }
}

# Export the updated data with only StatusCode 200 rows to a new CSV
$updatedRows | Export-Csv -Path "C:\AutoTasker\KQL\BookResults.csv" -NoTypeInformation

Write-Host "HTTP requests completed. Filtered CSV saved to 'BookResults.csv'."

################

$csvData = Import-Csv -Path "C:\AutoTasker\KQL\JournalResults.csv"

# Initialize an empty array to hold updated rows
$updatedRows = @()

# Iterate through each row in the CSV
foreach ($row in $csvData) {
    # Get the RequestURI from the current row
    $requestURI = $row.RequestURI

    # Perform an HTTP GET request for the RequestURI
    try {
        $response = Invoke-WebRequest -Uri $requestURI -Method Get -TimeoutSec 30
        
        # Check if the StatusCode is 200
        if ($response.StatusCode -eq 200) {
            # If StatusCode is 200, add the row to the updated array
            $updatedRow = [PSCustomObject]@{
                RequestURI    = $row.RequestURI
                UniqueRequests = $row.UniqueRequests
                Identifier    = $row.Identifier
                StatusCode    = $response.StatusCode
                StatusMessage = $response.StatusDescription
            }
            $updatedRows += $updatedRow
            Write-Host "Successfully reached: $requestURI - Status Code: $($response.StatusCode)"
        } else {
            Write-Host "Skipping: $requestURI - Status Code: $($response.StatusCode)"
        }
    }
    catch {
        # If an error occurs (e.g., network issues), add a failed status row
        Write-Host "Failed to reach: $requestURI - Error: $_"
    }
}

# Export the updated data with only StatusCode 200 rows to a new CSV
$updatedRows | Export-Csv -Path "C:\AutoTasker\KQL\JournalResults.csv" -NoTypeInformation

Write-Host "HTTP requests completed. Filtered CSV saved to 'JournalResults.csv'."



